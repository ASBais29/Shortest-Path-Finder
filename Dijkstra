//Using Dijkstraâ€™s Shortest Path Algorithm
//Priority Queue STL;
#include<bits/stdc++.h> 
using namespace std; 
# define INF INT_MAX 

typedef pair<int, int> pa; 
  
class Graph 
{ 
    int V;
    list< pair<int, int> > *adj; 
  
public: 
    Graph(int V);  
    void addEdge(int u, int v, int w); 
    void shortestPath(int s,int dest); 
    void paren(int parent[],int size,int u,int d);
}; 

Graph::Graph(int V) 
{ 
    this->V = V; 
    adj = new list<pa> [V]; 
} 
  
void Graph::addEdge(int u, int v, int w) 
{ 
    adj[u].push_back(make_pair(v, w)); 
    adj[v].push_back(make_pair(u, w)); 
} 

void Graph:: paren(int parent[],int size,int u,int d)
{
     if(parent[u]==-1)
     {
         printf("%d -> ",u);
         return;
     }
   
   
  paren(parent, size,parent[u],d);
  if(u==d)
  printf("%d\n",u);
  else
  printf("%d -> ",u);
}

void Graph::shortestPath(int src,int dest) 
{ 
    priority_queue< pa, vector <pa> , greater<pa> > pq; 
    vector<int> dist(V, INF); 
    pq.push(make_pair(0, src)); 
    int parent[V]={-1};
    dist[src] = 0; 
    while (!pq.empty()) 
    { 

        int u = pq.top().second; 
        pq.pop(); 
        list< pair<int, int> >::iterator i; 
        for (i = adj[u].begin(); i != adj[u].end(); ++i) 
        { 
            int v = (*i).first; 
            int weight = (*i).second; 
            if (dist[v] > dist[u] + weight) 
            { 
                dist[v] = dist[u] + weight; 
                parent[v]=u;
                pq.push(make_pair(dist[v], v)); 
            } 
        } 
    } 
    printf("Shortest distance between current position to destination is: "); 
        printf("%d \t\n", dist[dest]); 
printf("Shortest path is: "); 
paren(parent,V,dest,dest);
      
     
} 

int main() 
{ 
    int V = 9; 
    Graph g(V); 

    g.addEdge(0, 1, 4); 
    g.addEdge(0, 7, 8); 
    g.addEdge(1, 2, 8); 
    g.addEdge(1, 7, 11); 
    g.addEdge(2, 3, 7); 
    g.addEdge(2, 8, 2); 
    g.addEdge(2, 5, 4); 
    g.addEdge(3, 4, 9); 
    g.addEdge(3, 5, 14); 
    g.addEdge(4, 5, 10); 
    g.addEdge(5, 6, 2); 
    g.addEdge(6, 7, 1); 
    g.addEdge(6, 8, 6); 
    g.addEdge(7, 8, 7); 
  
//Current positon ie: the node you are nearest to is being processed
printf("Your current position is: ");
int curr;
cin>>curr;
//Enter Destination:
printf("Enter Destination: ");
int dest;
cin>>dest;
    g.shortestPath(curr,dest); 
  
    return 0; 
} 
